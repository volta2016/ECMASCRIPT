/** ::"Hoisting":: es un concepto fundamental del lenguaje JavaScript debido a que te ayuda a entender c√≥mo tu c√≥digo 
es ejecutado y por ello, es uno de los temas que se preguntan con frecuencia en las entrevistas (en serio) .

Aunque el concepto es muy sencillo, la mayor√≠a de las veces se malinterpreta. En este art√≠culo vas a aprender 
qu√© es hoisting con la ayuda de algunos ejemplos.

Lo que vas a aprender
Despu√©s de leer este art√≠culo vas entender:

El contexto de ejecuci√≥n y sus fases.
C√≥mo funciona el hoisting con variables (var) y funciones (function)
Casos especiales de hoisting (const y let).
Qu√© es la Temporal Dead Zone.**/

var source = "https://github.com/volta2016";
console.log(source);

function printSource() {
	console.log(`"from printSource:" ${source}`);
}

printSource();

//salida:
/*https://github.com/volta2016
desde print: https://github.com/volta2016

El c√≥digo se ejecuta l√≠nea por l√≠nea.

Echemos un vistazo a lo que sucede:

Se crea la variable source y se le asigna un valor a https://github.com/volta2016 .
Se encuentra la l√≠nea de c√≥digo console.log y el valor de source se imprime en la consola: https://github.com/volta2016.
Del mismo modo, la siguiente l√≠nea es la definici√≥n de la funci√≥n printSource. Seguido de la llamada real a la funci√≥n printSource(). 
Esto resulta en las declaraciones dentro de la funci√≥n que se ejecuta y la cadena desde print: https://github.com/volta2016se 
imprime en la consola.
Pero, ¬øes realmente tan sencilla la ejecuci√≥n de c√≥digo en JavaScript?

Echa un vistazo a esta variaci√≥n del mismo ejemplo:

*/

console.log(source);
printSource();

function printSource() {
	// definici√≥n de la funci√≥n
	console.log(`"from printSource:" ${source}`);
}

var source = "https://github.com/volta2016";
printSource();

/*Resultado:

undefined
desde print: undefined
desde print: https://github.com/volta2016

Hoisting en JavaScript te permite acceder a funciones y variables antes de que hayan sido creadas.

::Contexto de Ejecuci√≥n:: ‚è∞

El contexto de ejecuci√≥n es el entorno que prepara el motor de JavaScript para ejecutar el c√≥digo que escribimos.
En pocas palabras, es la informaci√≥n necesaria para ejecutar el c√≥digo.
El contexto de ejecuci√≥n se crea en dos fases:


1 - ::Fase de creaci√≥n:: ü§û


- El c√≥digo es escaneado/parseado para las variables y funciones.
- Se reserva espacio para las variables en memoria.
- Las definiciones de las funciones se cargan en la memoria.



2- ::Fase de ejecuci√≥n:: ‚èèÔ∏è

- El c√≥digo se ejecuta l√≠nea por l√≠nea con la informaci√≥n de la fase de creaci√≥n.
- Se asignan valores a las variables.
- Se ejecutan las funciones.


vamos a ver otro ejemplo de contexto de ejcuci√≥n
*/

source = 5
console.log(source)
printFinal()
var printFinal = function print() {
	console.log(`desde la funcion: ${source}`)
}

var source;

/*
* El valor 5 se asigna a source.
* 5 se imprime en la consola.
* Se llama a printFnExp. Sin embargo, arroja un error - Uncaught TypeError: printFnExp no es una funci√≥n.

Para solucionar este error, vea los cambios en el c√≥digo que aparecen a continuaci√≥n:

*/


source = 5
console.log(source)
var printFinal = function print() {
	console.log(`desde la funcion: ${source}`)
}
printFinal()

var source;


/*Salida:

5
desde la funci√≥n: 5


Casos Excepcionales
- var se inicializa con undefined
- en el caso de let y const el valor se inicializa solo durante la fase de ejecuci√≥n


*/

console.log(source);
print();
function print() {
  console.log("desde print: " + source);
}
let source = "@volta2016";

//Salida:

//Uncaught ReferenceError: source is not defined

//ahora vamos aver el uso correcto de let:


let source = "@volta2016";

console.log(source);

function print() {
	console.log("desde print: " + source);
}
print();


//Durante la fase de ejecuci√≥n, si no se proporciona ning√∫n valor junto con la declaraci√≥n, el valor se considera undefined.

//Veamos el siguiente ejemplo

let source; // declaraci√≥n
console.log(source);
source = "@volta2016"; // inicializaci√≥n
function print() {
  console.log("desde print: " + source);
}
print();


//Salida:

//undefined
//from print: @volta2016


/* Ejemplo con const 

*/

const source;
console.log(source)


//Salida:

//Uncaught SyntaxError: Missing initializer in const declaration

//Una¬†const¬†indica un valor constante. Este valor no puede ser cambiado durante la ejecuci√≥n del c√≥digo. Por lo tanto, tiene sentido que requiera un valor inicializador en el momento de la declaraci√≥n.
//Uso correcto de¬†const:

const source = "@volta2016";
console.log(source);


/* resumen:

"Hoisting es cuando las funciones y las variables se almacenan en 
memoria para un contexto de ejecuci√≥n antes de ejecutar nuestro c√≥digo." */
